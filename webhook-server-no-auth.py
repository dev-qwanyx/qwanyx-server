#!/usr/bin/env python3
"""
WEBHOOK SERVER - Auto-deploy sur push GitHub (SANS AUTHENTIFICATION POUR TEST)
"""

from flask import Flask, request, jsonify
import subprocess
import os

app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def github_webhook():
    """Re√ßoit le webhook de GitHub et ex√©cute le d√©ploiement"""
    
    # Parser le payload
    payload = request.json
    print(f"üì® Webhook re√ßu: {payload.get('ref', 'unknown ref')}")
    
    # V√©rifier que c'est un push sur main
    if payload.get('ref') == 'refs/heads/main':
        print(f"üöÄ Push d√©tect√© sur main par {payload.get('pusher', {}).get('name', 'unknown')}")
        
        # Ex√©cuter le d√©ploiement
        try:
            # 1. Pull les changements
            print("‚Üí Git pull...")
            subprocess.run([
                'git', 'pull', 'origin', 'main'
            ], cwd='/opt/qwanyx/apps/qwanyx-server', check=True)
            
            # 2. Ex√©cuter COMMANDS.sh s'il existe
            commands_file = '/opt/qwanyx/apps/qwanyx-server/COMMANDS.sh'
            if os.path.exists(commands_file):
                print("üìù Ex√©cution de COMMANDS.sh...")
                subprocess.run(['chmod', '+x', commands_file], check=True)
                result = subprocess.run([commands_file], capture_output=True, text=True)
                print(result.stdout)
                if result.stderr:
                    print(f"Erreurs: {result.stderr}")
                
                # 3. Reset COMMANDS.sh
                with open(commands_file, 'w') as f:
                    f.write('''#!/bin/bash
# COMMANDES √Ä EX√âCUTER SUR LE SERVEUR
# Claude √©crit ici, le serveur ex√©cute automatiquement apr√®s push

echo "üìù Pas de nouvelles commandes"
''')
                print("‚úÖ COMMANDS.sh r√©initialis√©")
            
            return jsonify({
                'status': 'success',
                'message': 'D√©ploiement r√©ussi'
            }), 200
            
        except Exception as e:
            print(f"‚ùå Erreur: {str(e)}")
            return jsonify({
                'status': 'error',
                'message': str(e)
            }), 500
    
    return jsonify({'status': 'ignored', 'ref': payload.get('ref')}), 200

@app.route('/health', methods=['GET'])
def health_check():
    """Point de sant√© pour v√©rifier que le serveur tourne"""
    return jsonify({'status': 'healthy'}), 200

if __name__ == '__main__':
    print("üöÄ Webhook server d√©marr√© sur le port 9999 (SANS AUTH)")
    app.run(host='0.0.0.0', port=9999)