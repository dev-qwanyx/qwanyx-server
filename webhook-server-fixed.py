#!/usr/bin/env python3
"""
WEBHOOK SERVER - Auto-deploy sur push GitHub
√Ä installer sur le serveur 135.181.72.183
"""

from flask import Flask, request, jsonify
import subprocess
import hmac
import hashlib
import os

app = Flask(__name__)

# Secret pour s√©curiser le webhook (√† configurer dans GitHub)
WEBHOOK_SECRET = "coman-sasvati-yodpoil-etoilamatla"

def verify_signature(payload, signature):
    """V√©rifie que le webhook vient bien de GitHub"""
    expected = hmac.new(
        WEBHOOK_SECRET.encode(),
        payload,
        hashlib.sha256
    ).hexdigest()
    return hmac.compare_digest(f"sha256={expected}", signature)

@app.route('/webhook', methods=['POST'])
def github_webhook():
    """Re√ßoit le webhook de GitHub et ex√©cute le d√©ploiement"""
    
    # V√©rifier la signature
    signature = request.headers.get('X-Hub-Signature-256')
    if not verify_signature(request.data, signature):
        return jsonify({'error': 'Invalid signature'}), 401
    
    # Parser le payload
    payload = request.json
    
    # V√©rifier que c'est un push sur main
    if payload.get('ref') == 'refs/heads/main':
        print(f"üöÄ Push d√©tect√© sur main par {payload['pusher']['name']}")
        
        # Ex√©cuter le d√©ploiement
        try:
            # 1. Pull les changements
            subprocess.run([
                'git', 'pull', 'origin', 'main'
            ], cwd='/opt/qwanyx/apps/qwanyx-server', check=True)
            
            # 2. Ex√©cuter COMMANDS.sh s'il existe
            commands_file = '/opt/qwanyx/apps/qwanyx-server/COMMANDS.sh'
            if os.path.exists(commands_file):
                print("üìù Ex√©cution de COMMANDS.sh...")
                subprocess.run(['chmod', '+x', commands_file], check=True)
                result = subprocess.run([commands_file], capture_output=True, text=True)
                print(result.stdout)
                
                # 3. Reset COMMANDS.sh
                with open(commands_file, 'w') as f:
                    f.write('''#!/bin/bash
# COMMANDES √Ä EX√âCUTER SUR LE SERVEUR
# Claude √©crit ici, le serveur ex√©cute automatiquement apr√®s pull

echo "üìù Pas de nouvelles commandes"
''')
                
                # Commit le reset
                subprocess.run(['git', 'add', 'COMMANDS.sh'], 
                             cwd='/opt/qwanyx/apps/qwanyx-server')
                subprocess.run(['git', 'commit', '-m', 'Reset COMMANDS.sh apr√®s ex√©cution'], 
                             cwd='/opt/qwanyx/apps/qwanyx-server')
                # Note: On ne push pas pour √©viter une boucle infinie
            
            return jsonify({
                'status': 'success',
                'message': 'D√©ploiement r√©ussi',
                'pusher': payload['pusher']['name']
            }), 200
            
        except Exception as e:
            return jsonify({
                'status': 'error',
                'message': str(e)
            }), 500
    
    return jsonify({'status': 'ignored'}), 200

@app.route('/health', methods=['GET'])
def health_check():
    """Point de sant√© pour v√©rifier que le serveur tourne"""
    return jsonify({'status': 'healthy'}), 200

if __name__ == '__main__':
    print("üöÄ Webhook server d√©marr√© sur le port 9999")
    app.run(host='0.0.0.0', port=9999)