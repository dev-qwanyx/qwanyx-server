#!/bin/bash
# COMMANDES POUR D√âPLOIEMENT QWANYX ARCHITECTURE
# Ex√©cut√© automatiquement par le webhook apr√®s push sur GitHub

echo "üöÄ D√âPLOIEMENT QWANYX - NOUVELLE ARCHITECTURE"
echo "============================================"
echo "Date: $(date)"
echo ""

# Navigation vers le dossier principal
cd /opt/qwanyx/QWANYX-Architecture-Clean || exit 1

# ========== GIT PULL AVEC RESET ==========
echo "üì• MISE √Ä JOUR DU CODE DEPUIS GITHUB"
echo "--------------------------------------------"

# Reset dur pour s'assurer que le serveur est propre
echo "üßπ Nettoyage des changements locaux..."
git reset --hard HEAD

# Pull des derniers changements
echo "üì• R√©cup√©ration des derniers changements..."
git pull origin main

echo "‚úÖ Code mis √† jour (serveur synchronis√© avec GitHub)"
echo ""

# ========== BUILD DES PACKAGES ==========
echo "üì¶ BUILD DES PACKAGES MONOREPO"
echo "--------------------------------------------"

# Build qwanyx-ui
echo "üé® Build @qwanyx/ui..."
cd packages/qwanyx-ui
npm install
npm run build
echo "‚úÖ @qwanyx/ui pr√™t"

# Build qwanyx-auth
echo ""
echo "üîê Build @qwanyx/auth..."
cd ../qwanyx-auth
npm install
npm run build
echo "‚úÖ @qwanyx/auth pr√™t"

# Build autodin-request-management  
echo ""
echo "üìã Build @autodin/request-management..."
cd ../autodin-request-management
npm install
npm run build
echo "‚úÖ @autodin/request-management pr√™t"

# Build autres packages si n√©cessaire
echo ""
echo "üì¶ Build autres packages..."
cd ../qwanyx-dashboard-v2
npm install
npm run build
echo "‚úÖ @qwanyx/dashboard-v2 pr√™t"

cd ../qwanyx-app-core
npm install
npm run build
echo "‚úÖ @qwanyx/app-core pr√™t"

cd ../qwanyx-form
npm install
npm run build
echo "‚úÖ @qwanyx/form pr√™t"

cd ../qwanyx-user-management
npm install
npm run build
echo "‚úÖ @qwanyx/user-management pr√™t"

cd ../qwanyx-dashboard
npm install
npm run build
echo "‚úÖ @qwanyx/dashboard pr√™t"

# ========== D√âPLOIEMENT AUTODIN NEXT.JS ==========
echo ""
echo "üöó D√âPLOIEMENT AUTODIN NEXT.JS"
echo "--------------------------------------------"

cd /opt/qwanyx/QWANYX-Architecture-Clean/apps/autodin

# Installation des d√©pendances
echo "üì¶ Installation des d√©pendances..."
npm install

# Build de production
echo "üî® Build de production..."
npm run build
if [ $? -ne 0 ]; then
    echo "‚ùå Erreur lors du build Next.js"
    echo "Essai de nettoyer le cache..."
    rm -rf .next
    npm run build
fi

# Red√©marrage avec PM2
echo "üîÑ Red√©marrage du service..."
pm2 stop autodin-next 2>/dev/null || true
pm2 delete autodin-next 2>/dev/null || true
PORT=3002 pm2 start npm --name "autodin-next" -- start
pm2 save

# V√©rifier que le service est bien d√©marr√©
sleep 5
pm2 status autodin-next

echo "‚úÖ Autodin Next.js d√©ploy√© sur port 3002"
echo "üìù Pour voir les logs: pm2 logs autodin-next"

# ========== SPU RUST (nouveau backend) ==========
echo ""
echo "ü¶Ä D√âPLOIEMENT SPU RUST"
echo "--------------------------------------------"

# Arr√™t de l'ancienne API Python et du SPU
echo "üîÑ Arr√™t des services existants..."
pkill -f "python3.*app_v2.py" || true
pkill -f "spu-core" || true
sleep 2

# Build et d√©marrage du SPU Rust
cd /opt/qwanyx/QWANYX-Architecture-Clean/qwanyx-brain/spu-core

# V√©rifier si cargo est install√©
if ! command -v cargo &> /dev/null; then
    echo "‚ùå Cargo n'est pas install√©. Installation de Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source $HOME/.cargo/env
fi

echo "üî® Build du SPU Core..."
cargo build --release
if [ $? -eq 0 ]; then
    echo "‚úÖ Build SPU r√©ussi"
    # D√©marrage du SPU avec les bonnes variables d'environnement
    export MONGODB_URI="mongodb://qwanyx:Iwb35TnYj#Vf@localhost:27017/?authSource=admin"
    export SPU_PORT=5002
    nohup ./target/release/spu-core > /tmp/spu.log 2>&1 &
    sleep 3
    
    # V√©rifier que le SPU est bien d√©marr√©
    if pgrep -f "spu-core" > /dev/null; then
        echo "‚úÖ SPU d√©marr√© sur port 5002"
    else
        echo "‚ùå SPU n'a pas d√©marr√©. V√©rification des logs..."
        tail -20 /tmp/spu.log
    fi
else
    echo "‚ùå Erreur lors du build SPU"
    echo "V√©rification des logs de compilation..."
fi

# ========== V√âRIFICATION DES SERVICES ==========
echo ""
echo "‚úÖ V√âRIFICATION DES SERVICES"
echo "--------------------------------------------"
sleep 5

# Test des endpoints
curl -s -o /dev/null -w "Autodin Next.js (3002): %{http_code}\n" http://localhost:3002 || echo "‚ùå Autodin Next.js: ERREUR"
curl -s -o /dev/null -w "SPU Core (5002): %{http_code}\n" http://localhost:5002/health || echo "‚ùå SPU Core: ERREUR"

# ========== R√âSUM√â ==========
echo ""
echo "üéâ D√âPLOIEMENT TERMIN√â"
echo "============================================"
echo ""
echo "üìù Logs disponibles:"
echo "  - PM2: pm2 logs autodin-next"
echo "  - SPU: /tmp/spu.log"
echo ""
echo "üåê URLs publiques:"
echo "  - http://135.181.72.183:3002 (Autodin Next.js)"
echo "  - http://135.181.72.183:5002 (SPU Core Backend)"
echo ""
echo "üí° Commandes utiles:"
echo "  - pm2 status           # Voir l'√©tat des services"
echo "  - pm2 logs autodin-next # Voir les logs en temps r√©el"
echo "  - pm2 restart autodin-next # Red√©marrer si n√©cessaire"
echo ""
echo "============================================"
date