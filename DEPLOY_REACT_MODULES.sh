#!/bin/bash
# ================================================
# SCRIPT DE D√âPLOIEMENT REACT + MODULE FEDERATION
# Option B : Installation compl√®te avec tous les modules
# ================================================

echo "üöÄ D√âPLOIEMENT COMPLET REACT + MODULE FEDERATION"
echo "================================================="
echo "Date: $(date)"
echo "Serveur: 135.181.72.183"
echo ""

# Variables
BASE_DIR="/opt/qwanyx/apps/qwanyx-server"
NODE_VERSION="20"  # Version de Node.js √† utiliser

# ========== √âTAPE 1: V√âRIFICATION PR√âREQUIS ==========
echo "üìã √âTAPE 1: V√©rification des pr√©requis..."
echo "-----------------------------------------"

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js non trouv√©. Installation requise..."
    curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | sudo -E bash -
    sudo apt-get install -y nodejs
    echo "‚úÖ Node.js install√©: $(node --version)"
else
    echo "‚úÖ Node.js trouv√©: $(node --version)"
fi

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    echo "‚ùå npm non trouv√©"
    exit 1
else
    echo "‚úÖ npm trouv√©: $(npm --version)"
fi

# V√©rifier PM2 (gestionnaire de processus Node)
if ! command -v pm2 &> /dev/null; then
    echo "üì¶ Installation de PM2..."
    npm install -g pm2
    echo "‚úÖ PM2 install√©"
else
    echo "‚úÖ PM2 trouv√©"
fi

cd $BASE_DIR

# ========== √âTAPE 2: GIT PULL ==========
echo ""
echo "üì• √âTAPE 2: R√©cup√©ration du code..."
echo "------------------------------------"
git pull origin main
echo "‚úÖ Code mis √† jour"

# ========== √âTAPE 3: INSTALLATION QWANYX-UI ==========
echo ""
echo "üì¶ √âTAPE 3: Installation de qwanyx-ui (biblioth√®que de composants)..."
echo "----------------------------------------------------------------------"
if [ -d "qwanyx-ui" ]; then
    cd $BASE_DIR/qwanyx-ui
    echo "Installation des d√©pendances..."
    npm ci --legacy-peer-deps
    echo "Build de la biblioth√®que..."
    npm run build
    echo "‚úÖ qwanyx-ui construit"
else
    echo "‚ùå Dossier qwanyx-ui non trouv√©!"
    exit 1
fi

# ========== √âTAPE 4: INSTALLATION QWANYX-MODULES ==========
echo ""
echo "üîß √âTAPE 4: Installation de qwanyx-modules (Module Federation)..."
echo "-----------------------------------------------------------------"
cd $BASE_DIR
if [ -d "qwanyx-modules" ]; then
    cd $BASE_DIR/qwanyx-modules
    echo "Installation des d√©pendances..."
    npm ci --legacy-peer-deps
    
    echo "Build de production..."
    npm run build
    
    echo "Arr√™t de l'ancienne instance si elle existe..."
    pm2 delete qwanyx-modules 2>/dev/null || true
    
    echo "D√©marrage avec PM2..."
    pm2 start npm --name "qwanyx-modules" -- run preview
    
    # Attendre que le service d√©marre
    sleep 5
    
    # V√©rifier que √ßa tourne
    if curl -f http://localhost:4184/assets/remoteEntry.js > /dev/null 2>&1; then
        echo "‚úÖ qwanyx-modules accessible sur port 4184"
    else
        echo "‚ö†Ô∏è qwanyx-modules peut prendre plus de temps √† d√©marrer..."
    fi
else
    echo "‚ùå Dossier qwanyx-modules non trouv√©!"
    exit 1
fi

# ========== √âTAPE 5: BUILD AUTODIN-UI ==========
echo ""
echo "üèóÔ∏è √âTAPE 5: Build de autodin-ui..."
echo "-----------------------------------"
cd $BASE_DIR
if [ -d "autodin-ui" ]; then
    cd $BASE_DIR/autodin-ui
    
    echo "Installation des d√©pendances..."
    npm ci --legacy-peer-deps
    
    echo "Configuration pour production..."
    cat > .env.production << EOF
VITE_API_URL=http://135.181.72.183:5002
VITE_MODULES_URL=http://localhost:4184
EOF
    
    echo "Build de production..."
    npm run build || {
        echo "‚ö†Ô∏è Build avec erreurs TypeScript, tentative avec --force..."
        npx vite build
    }
    
    if [ -d "dist" ]; then
        echo "‚úÖ Build autodin-ui cr√©√© dans dist/"
    else
        echo "‚ùå √âchec du build autodin-ui"
        exit 1
    fi
else
    echo "‚ùå Dossier autodin-ui non trouv√©!"
    exit 1
fi

# ========== √âTAPE 6: D√âPLOIEMENT DU BUILD ==========
echo ""
echo "üìÇ √âTAPE 6: D√©ploiement du build..."
echo "------------------------------------"
cd $BASE_DIR

# Cr√©er un backup de l'ancien site
if [ -d "autodin/frontend/static/dist_backup" ]; then
    rm -rf autodin/frontend/static/dist_backup
fi
if [ -d "autodin/frontend/static/dist" ]; then
    mv autodin/frontend/static/dist autodin/frontend/static/dist_backup
    echo "‚úÖ Backup de l'ancien build cr√©√©"
fi

# Copier le nouveau build
cp -r autodin-ui/dist autodin/frontend/static/
echo "‚úÖ Nouveau build d√©ploy√©"

# ========== √âTAPE 7: CONFIGURATION NGINX ==========
echo ""
echo "‚öôÔ∏è √âTAPE 7: Configuration serveur web..."
echo "-----------------------------------------"
# Pour servir les fichiers React correctement
cat > /tmp/autodin-react.conf << 'EOF'
server {
    listen 8090;
    server_name _;
    
    root /opt/qwanyx/apps/qwanyx-server/autodin/frontend/static/dist;
    index index.html;
    
    # G√©rer les routes React (SPA)
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # Proxy vers l'API
    location /api {
        proxy_pass http://localhost:5002;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
EOF

echo "Configuration nginx cr√©√©e dans /tmp/autodin-react.conf"
echo "√Ä installer manuellement si nginx est utilis√©"

# ========== √âTAPE 8: RED√âMARRAGE DES SERVICES ==========
echo ""
echo "üîÑ √âTAPE 8: Red√©marrage des services..."
echo "----------------------------------------"

# Arr√™ter l'ancien Flask si il tourne
pkill -f "python3.*app_bulma.py" || true

# Option A: Servir avec Python simple (temporaire)
cd $BASE_DIR/autodin/frontend/static/dist
nohup python3 -m http.server 8090 > /tmp/autodin-react.log 2>&1 &
echo "‚úÖ Serveur web Python lanc√© sur port 8090"

# ========== √âTAPE 9: V√âRIFICATION FINALE ==========
echo ""
echo "‚úÖ √âTAPE 9: V√©rification des services..."
echo "-----------------------------------------"
sleep 3

echo "Statut des services:"
curl -s -o /dev/null -w "- API QWANYX (5002): %{http_code}\n" http://localhost:5002/health || echo "- API QWANYX: ERREUR"
curl -s -o /dev/null -w "- Module Federation (4184): %{http_code}\n" http://localhost:4184/assets/remoteEntry.js || echo "- Module Federation: ERREUR"
curl -s -o /dev/null -w "- Autodin React (8090): %{http_code}\n" http://localhost:8090 || echo "- Autodin: ERREUR"

echo ""
echo "PM2 Status:"
pm2 status

echo ""
echo "üéâ D√âPLOIEMENT TERMIN√â!"
echo "======================="
echo ""
echo "üìù NOTES IMPORTANTES:"
echo "- qwanyx-modules tourne sur port 4184 (PM2)"
echo "- autodin-ui est servi sur port 8090"
echo "- Pour voir les logs: pm2 logs qwanyx-modules"
echo "- Pour red√©marrer: pm2 restart qwanyx-modules"
echo ""
echo "üåê URLs:"
echo "- http://135.181.72.183:8090 - Autodin (React)"
echo "- http://135.181.72.183:5002 - API"
echo "- http://localhost:4184 - Module Federation (interne)"
echo ""
echo "‚ö†Ô∏è Si probl√®me, restaurer avec:"
echo "  mv autodin/frontend/static/dist_backup autodin/frontend/static/dist"